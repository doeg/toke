{"version":3,"sources":["../../src/toke.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;qBAEU,SAAS;;IAApB,KAAK;;0BACU,gBAAgB;;;;0BAChB,gBAAgB;;;;;;;;;;;;;;AAW9B,oBAAC,IAAI,EAAE;;;AAChB,QAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AACtB,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,2BAAkB,CAAC;AAC9C,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,2BAAkB,CAAC;GAC/C;;;;;;;;;;;WAQC,YAAC,GAAG,EAAE;AACN,aAAO,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAClD;;;WAEW,sBAAC,KAAK,EAAE,GAAG,EAAE;AACvB,aAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KACvC","file":"toke.js","sourcesContent":["\"use strict\";\n\nimport * as utils from \"./utils\";\nimport defaultLexicon from \"../lib/lexicon\";\nimport defaultGrammar from \"../lib/grammar\";\n\n\n/**\n *\n */\nexport default class {\n\n  /**\n   * Instantiates a new Toke object.\n   */\n  constructor(opts) {\n    var opts = opts || {};\n    this.grammar = opts.grammar || defaultGrammar;\n    this.lexicon = opts.lexicon || defaultLexicon;\n  }\n\n  /**\n   * Compiles the given template string. Example:\n   *\n   *    var sentence = token.mk(\"{NP} {VP}\");\n   *\n   */\n  mk(str) {\n    return utils.mk(str, this.grammar, this.lexicon);\n  }\n\n  compileToken(token, pos) {\n    return utils.compileToken(token, pos);\n  }\n\n}\n"]}